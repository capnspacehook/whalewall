// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package database

import (
	"context"
)

const addContainer = `-- name: AddContainer :exec
INSERT INTO
	containers(id, name)
VALUES
	(
		?,
		?
	)
`

type AddContainerParams struct {
	ID   string
	Name string
}

func (q *Queries) AddContainer(ctx context.Context, arg AddContainerParams) error {
	_, err := q.exec(ctx, q.addContainerStmt, addContainer, arg.ID, arg.Name)
	return err
}

const addContainerAddr = `-- name: AddContainerAddr :exec
INSERT INTO
	addrs(addr, container_id)
VALUES
	(
		?,
		?
	)
`

type AddContainerAddrParams struct {
	Addr        []byte
	ContainerID string
}

func (q *Queries) AddContainerAddr(ctx context.Context, arg AddContainerAddrParams) error {
	_, err := q.exec(ctx, q.addContainerAddrStmt, addContainerAddr, arg.Addr, arg.ContainerID)
	return err
}

const containerExists = `-- name: ContainerExists :one
SELECT
	EXISTS (
		SELECT
			1
		FROM
			containers
		WHERE
			id = ?
	)
`

func (q *Queries) ContainerExists(ctx context.Context, id string) (interface{}, error) {
	row := q.queryRow(ctx, q.containerExistsStmt, containerExists, id)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const deleteContainer = `-- name: DeleteContainer :exec
DELETE FROM
	containers
WHERE
	id = ?
`

func (q *Queries) DeleteContainer(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteContainerStmt, deleteContainer, id)
	return err
}

const deleteContainerAddrs = `-- name: DeleteContainerAddrs :exec
DELETE FROM
	addrs
WHERE
	container_id = ?
`

func (q *Queries) DeleteContainerAddrs(ctx context.Context, containerID string) error {
	_, err := q.exec(ctx, q.deleteContainerAddrsStmt, deleteContainerAddrs, containerID)
	return err
}

const getContainerAddrs = `-- name: GetContainerAddrs :many
SELECT 
	addr
FROM
	addrs
WHERE
	container_id = ?
`

func (q *Queries) GetContainerAddrs(ctx context.Context, containerID string) ([][]byte, error) {
	rows, err := q.query(ctx, q.getContainerAddrsStmt, getContainerAddrs, containerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items [][]byte
	for rows.Next() {
		var addr []byte
		if err := rows.Scan(&addr); err != nil {
			return nil, err
		}
		items = append(items, addr)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContainerName = `-- name: GetContainerName :one
SELECT
	name
FROM
	containers
WHERE
	id = ?
`

func (q *Queries) GetContainerName(ctx context.Context, id string) (string, error) {
	row := q.queryRow(ctx, q.getContainerNameStmt, getContainerName, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const getContainers = `-- name: GetContainers :many
SELECT 
	id,
	name
FROM
	containers
`

func (q *Queries) GetContainers(ctx context.Context) ([]Container, error) {
	rows, err := q.query(ctx, q.getContainersStmt, getContainers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Container
	for rows.Next() {
		var i Container
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
